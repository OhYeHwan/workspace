{"ast":null,"code":"import _initializerDefineProperty from \"/Users/yh/Desktop/github/workspace/kdb_studio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/initializerDefineProperty\";\nimport _applyDecoratedDescriptor from \"/Users/yh/Desktop/github/workspace/kdb_studio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/applyDecoratedDescriptor\";\nimport _initializerWarningHelper from \"/Users/yh/Desktop/github/workspace/kdb_studio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/initializerWarningHelper\";\n\nvar _class, _descriptor, _descriptor2;\n\nimport { observable, makeObservable, action, computed, toJS } from 'mobx';\nimport generateId from '../../IDGenerator';\nlet ExStore = (_class = class ExStore {\n  constructor() {\n    _initializerDefineProperty(this, \"_target\", _descriptor, this);\n\n    this.beforeData = [{\n      parentId: 'root',\n      id: 'root'\n    }, {\n      parentId: 'root',\n      id: '1',\n      name: '1'\n    }, {\n      parentId: '1',\n      id: '2',\n      name: '2'\n    }, {\n      parentId: '1',\n      id: '3',\n      name: '3'\n    }, {\n      parentId: '1',\n      id: '4',\n      name: '4'\n    }, {\n      parentId: '2',\n      id: '5',\n      name: '5'\n    }, {\n      parentId: '2',\n      id: '6',\n      name: '6'\n    }, {\n      parentId: '1',\n      id: '10',\n      name: '10'\n    }, {\n      parentId: 'root',\n      id: '21',\n      name: '21'\n    }, {\n      parentId: '21',\n      id: '22',\n      name: '22'\n    }];\n\n    _initializerDefineProperty(this, \"_data\", _descriptor2, this);\n\n    makeObservable(this);\n  }\n\n  get target() {\n    return toJS(this._target);\n  }\n\n  funcSelected(target) {\n    this._target = target;\n  }\n\n  funcTreeModel(arrayList, rootId) {\n    let rootNodes = [];\n\n    let traverse = function (nodes, item, index) {\n      if (nodes instanceof Array) {\n        return nodes.some(function (node) {\n          if (node.id === item.parentId) {\n            node.children = node.children || [];\n            return node.children.push(arrayList.splice(index, 1)[0]);\n          }\n\n          return traverse(node.children, item, index);\n        });\n      }\n    };\n\n    while (arrayList.length > 0) {\n      arrayList.some(function (item, index) {\n        if (item.parentId === rootId) {\n          return rootNodes.push(arrayList.splice(index, 1)[0]);\n        }\n\n        return traverse(rootNodes, item, index);\n      });\n    }\n\n    return rootNodes;\n  }\n\n  funcBokje() {\n    let dataBokje = [...this.beforeData];\n    console.log(dataBokje); // let afterData = this.funcTreeModel(dataBokje, 'root');\n    // let data = afterData.filter(i => i.id !== 'root');\n    // this._data = data;\n\n    this._data = this.funcTreeModel(dataBokje, 'root').filter(i => i.id !== 'root');\n  }\n\n  get data() {\n    return toJS(this._data);\n  }\n\n  funcAddRootUk() {\n    let tmp = generateId(5);\n    let object = {\n      parentId: 'root',\n      id: tmp,\n      name: tmp\n    };\n    this.beforeData.push(object);\n    this.funcBokje();\n  }\n\n  funcAddChildUk() {\n    this.funcChangeTarget();\n  } //   @action\n  //   funcFindeIndex() {\n  //     // 선택한 uk의 children을 추가한 target 생성\n  //     this.funcChangeTarget();\n  //     // 1 디렉토리에 추가할 경우\n  //     let findindex = this._data.findIndex(i => i.id === this._target.id);\n  //     this._data.splice(findindex, 1, this._target);\n  //     // 2 디렉토리에 추가할때\n  //     let rootIndex = this._data.findIndex(i => i.id === this._target.parent);\n  //     let obj = this._data.find(i => i.id === this._target.parent);\n  //     let findindex2 = obj.children.findIndex(i => i.id === this._target.id);\n  //     obj.children.splice(findindex2, 1, this._target);\n  //     this._data.splice(rootIndex, 1, obj);\n  //     // 3 디렉토리에 추가할때\n  //     let rootIndex2 = this._data.findIndex(i => i.id === this._tareget.root);\n  //     let obj2 = this._data.find(i => i.id === this._target.root);\n  //     let obj3 = obj2.children.find(i => i.id === this._target.parent);\n  //     let findindex3 = obj2.children.map(i => i.id === this._target.parent);\n  //     let findindex4 = obj3.children.findIndex(i => i.id === this._target.id);\n  //     obj3.children.splice(findindex4, 1, this._target);\n  //     obj2.children.splice(findindex3, 1, obj3);\n  //     this._data.splice(rootIndex2, 1, obj2);\n  //     // 4 디렉토리 추가할때\n  //     // 현재 선택한 아이템의 루트가 일치할때 인덱스 저장\n  //   }\n\n\n  funcChangeTarget() {\n    let tmp = generateId(5);\n    let child = {\n      id: tmp,\n      name: tmp\n    };\n    const haveChildren = ('children' in this._target);\n\n    if (haveChildren === true) {\n      this._target = { ...this._target,\n        ...this._target.children.push(child)\n      };\n    } else {\n      this._target = { ...this._target,\n        children: [child]\n      };\n    }\n\n    console.log(toJS(this._target));\n\n    let ff = this._data.findIndex(i => i.id === this._target.id);\n\n    this._data.splice(ff, 1, this._target);\n  }\n\n}, (_descriptor = _applyDecoratedDescriptor(_class.prototype, \"_target\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return {\n      parentId: null,\n      id: null,\n      name: '',\n      children: []\n    };\n  }\n}), _applyDecoratedDescriptor(_class.prototype, \"target\", [computed], Object.getOwnPropertyDescriptor(_class.prototype, \"target\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"funcSelected\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"funcSelected\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"funcTreeModel\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"funcTreeModel\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"funcBokje\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"funcBokje\"), _class.prototype), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, \"_data\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return [];\n  }\n}), _applyDecoratedDescriptor(_class.prototype, \"data\", [computed], Object.getOwnPropertyDescriptor(_class.prototype, \"data\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"funcAddRootUk\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"funcAddRootUk\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"funcAddChildUk\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"funcAddChildUk\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"funcChangeTarget\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"funcChangeTarget\"), _class.prototype)), _class);\nexport default new ExStore();","map":{"version":3,"sources":["/Users/yh/Desktop/github/workspace/kdb_studio/src/uk/store/ExStore.js"],"names":["observable","makeObservable","action","computed","toJS","generateId","ExStore","constructor","beforeData","parentId","id","name","target","_target","funcSelected","funcTreeModel","arrayList","rootId","rootNodes","traverse","nodes","item","index","Array","some","node","children","push","splice","length","funcBokje","dataBokje","console","log","_data","filter","i","data","funcAddRootUk","tmp","object","funcAddChildUk","funcChangeTarget","child","haveChildren","ff","findIndex"],"mappings":"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","sourcesContent":["import { observable, makeObservable, action, computed, toJS } from 'mobx';\nimport generateId from '../../IDGenerator';\n\nclass ExStore {\n  constructor() {\n    makeObservable(this);\n  }\n\n  @observable\n  _target = {\n    parentId: null,\n    id: null,\n    name: '',\n    children: [],\n  };\n\n  @computed\n  get target() {\n    return toJS(this._target);\n  }\n\n  @action\n  funcSelected(target) {\n    this._target = target;\n  }\n\n  beforeData = [\n    {\n      parentId: 'root',\n      id: 'root',\n    },\n    {\n      parentId: 'root',\n      id: '1',\n      name: '1',\n    },\n    {\n      parentId: '1',\n      id: '2',\n      name: '2',\n    },\n    {\n      parentId: '1',\n      id: '3',\n      name: '3',\n    },\n    {\n      parentId: '1',\n      id: '4',\n      name: '4',\n    },\n    {\n      parentId: '2',\n      id: '5',\n      name: '5',\n    },\n    {\n      parentId: '2',\n      id: '6',\n      name: '6',\n    },\n    {\n      parentId: '1',\n      id: '10',\n      name: '10',\n    },\n    {\n      parentId: 'root',\n      id: '21',\n      name: '21',\n    },\n    {\n      parentId: '21',\n      id: '22',\n      name: '22',\n    },\n  ];\n\n  @action\n  funcTreeModel(arrayList, rootId) {\n    let rootNodes = [];\n\n    let traverse = function (nodes, item, index) {\n      if (nodes instanceof Array) {\n        return nodes.some(function (node) {\n          if (node.id === item.parentId) {\n            node.children = node.children || [];\n            return node.children.push(arrayList.splice(index, 1)[0]);\n          }\n          return traverse(node.children, item, index);\n        });\n      }\n    };\n\n    while (arrayList.length > 0) {\n      arrayList.some(function (item, index) {\n        if (item.parentId === rootId) {\n          return rootNodes.push(arrayList.splice(index, 1)[0]);\n        }\n        return traverse(rootNodes, item, index);\n      });\n    }\n    return rootNodes;\n  }\n\n  @action\n  funcBokje() {\n    let dataBokje = [...this.beforeData];\n    console.log(dataBokje);\n    // let afterData = this.funcTreeModel(dataBokje, 'root');\n    // let data = afterData.filter(i => i.id !== 'root');\n    // this._data = data;\n\n    this._data = this.funcTreeModel(dataBokje, 'root').filter(\n      i => i.id !== 'root',\n    );\n  }\n\n  @observable\n  _data = [];\n\n  @computed\n  get data() {\n    return toJS(this._data);\n  }\n\n  @action\n  funcAddRootUk() {\n    let tmp = generateId(5);\n    let object = {\n      parentId: 'root',\n      id: tmp,\n      name: tmp,\n    };\n    this.beforeData.push(object);\n    this.funcBokje();\n  }\n\n  @action\n  funcAddChildUk() {\n    this.funcChangeTarget();\n  }\n\n  //   @action\n  //   funcFindeIndex() {\n  //     // 선택한 uk의 children을 추가한 target 생성\n  //     this.funcChangeTarget();\n\n  //     // 1 디렉토리에 추가할 경우\n  //     let findindex = this._data.findIndex(i => i.id === this._target.id);\n  //     this._data.splice(findindex, 1, this._target);\n\n  //     // 2 디렉토리에 추가할때\n  //     let rootIndex = this._data.findIndex(i => i.id === this._target.parent);\n  //     let obj = this._data.find(i => i.id === this._target.parent);\n\n  //     let findindex2 = obj.children.findIndex(i => i.id === this._target.id);\n  //     obj.children.splice(findindex2, 1, this._target);\n\n  //     this._data.splice(rootIndex, 1, obj);\n\n  //     // 3 디렉토리에 추가할때\n  //     let rootIndex2 = this._data.findIndex(i => i.id === this._tareget.root);\n  //     let obj2 = this._data.find(i => i.id === this._target.root);\n  //     let obj3 = obj2.children.find(i => i.id === this._target.parent);\n\n  //     let findindex3 = obj2.children.map(i => i.id === this._target.parent);\n  //     let findindex4 = obj3.children.findIndex(i => i.id === this._target.id);\n  //     obj3.children.splice(findindex4, 1, this._target);\n  //     obj2.children.splice(findindex3, 1, obj3);\n  //     this._data.splice(rootIndex2, 1, obj2);\n  //     // 4 디렉토리 추가할때\n  //     // 현재 선택한 아이템의 루트가 일치할때 인덱스 저장\n  //   }\n\n  @action\n  funcChangeTarget() {\n    let tmp = generateId(5);\n    let child = {\n      id: tmp,\n      name: tmp,\n    };\n\n    const haveChildren = 'children' in this._target;\n\n    if (haveChildren === true) {\n      this._target = {\n        ...this._target,\n        ...this._target.children.push(child),\n      };\n    } else {\n      this._target = {\n        ...this._target,\n        children: [child],\n      };\n    }\n    console.log(toJS(this._target));\n\n    let ff = this._data.findIndex(i => i.id === this._target.id);\n\n    this._data.splice(ff, 1, this._target);\n  }\n}\n\nexport default new ExStore();\n"]},"metadata":{},"sourceType":"module"}