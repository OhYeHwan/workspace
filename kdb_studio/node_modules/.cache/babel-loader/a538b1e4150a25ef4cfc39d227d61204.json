{"ast":null,"code":"import _initializerDefineProperty from \"/Users/yh/Desktop/github/workspace/kdb_studio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/initializerDefineProperty\";\nimport _applyDecoratedDescriptor from \"/Users/yh/Desktop/github/workspace/kdb_studio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/applyDecoratedDescriptor\";\nimport _initializerWarningHelper from \"/Users/yh/Desktop/github/workspace/kdb_studio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/initializerWarningHelper\";\n\nvar _class, _descriptor, _descriptor2;\n\nimport { observable, action, makeObservable, toJS, computed } from 'mobx';\nlet UkStore = (_class = class UkStore {\n  constructor() {\n    _initializerDefineProperty(this, \"_uks\", _descriptor, this);\n\n    _initializerDefineProperty(this, \"_target\", _descriptor2, this);\n\n    makeObservable(this);\n  } // 서버에서 받아온 uk 리스트를 담을 배열\n\n\n  get uks() {\n    return toJS(this._uks);\n  }\n\n  get target() {\n    return toJS(this._target);\n  }\n\n  get question() {\n    return this._question;\n  }\n\n  clear() {\n    this._target = {\n      id: null,\n      name: '',\n      des: '',\n      questions: []\n    };\n  } //  **** UK 관련 함수 ****\n\n\n  funcTargetOnChange(key, value) {\n    this._target = { ...this._target,\n      [key]: value\n    };\n  }\n\n  funcSelectedUk(target) {\n    this._target = target;\n  }\n\n  funcAddUk(target) {\n    this._uks.push(target);\n\n    this.funcSelectedUk(target);\n  }\n\n  funcUpdateUk() {\n    let foundUk = this._uks.find(uk => uk.id === this._target.id); // find 주어진 조건을 만족하는 첫번째 요소 값을 반환 else undefined\n\n\n    foundUk.name = this._target.name;\n    foundUk.des = this._target.des;\n    foundUk.questions = this.target.questions;\n  }\n\n  funcRemoveUk() {\n    let index = this._uks.findIndex(uk => uk.id === this._target.id);\n\n    if (index > -1) {\n      this._uks.splice(index, 1);\n    }\n\n    this.clear();\n  } // **** Question 관련 함수 ****\n\n\n  funcAddQuestion(question) {\n    this.target.questions.push(question);\n    this._question = '';\n  }\n\n  funcRemoveQuestion(id) {\n    let index = this.target.questions.findIndex(question => question.id === id);\n\n    if (index > -1) {\n      this.target.questions.splice(index, 1);\n    }\n  }\n\n  funcQuestionChange(question) {\n    this._question = question;\n  }\n\n  funcKeyPress(event, question) {\n    if (event.key === 'Enter') {\n      this.funcAddQuestion(question);\n    }\n  }\n\n}, (_descriptor = _applyDecoratedDescriptor(_class.prototype, \"_uks\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return [];\n  }\n}), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, \"_target\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return {\n      id: null,\n      name: '',\n      des: '',\n      question: '',\n      questions: []\n    };\n  }\n}), _applyDecoratedDescriptor(_class.prototype, \"uks\", [computed], Object.getOwnPropertyDescriptor(_class.prototype, \"uks\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"target\", [computed], Object.getOwnPropertyDescriptor(_class.prototype, \"target\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"question\", [computed], Object.getOwnPropertyDescriptor(_class.prototype, \"question\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"clear\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"clear\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"funcTargetOnChange\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"funcTargetOnChange\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"funcSelectedUk\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"funcSelectedUk\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"funcAddUk\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"funcAddUk\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"funcUpdateUk\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"funcUpdateUk\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"funcRemoveUk\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"funcRemoveUk\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"funcAddQuestion\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"funcAddQuestion\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"funcRemoveQuestion\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"funcRemoveQuestion\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"funcQuestionChange\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"funcQuestionChange\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"funcKeyPress\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"funcKeyPress\"), _class.prototype)), _class);\nexport default new UkStore();","map":{"version":3,"sources":["/Users/yh/Desktop/github/workspace/kdb_studio/src/uk/store/UkStore.js"],"names":["observable","action","makeObservable","toJS","computed","UkStore","constructor","uks","_uks","target","_target","question","_question","clear","id","name","des","questions","funcTargetOnChange","key","value","funcSelectedUk","funcAddUk","push","funcUpdateUk","foundUk","find","uk","funcRemoveUk","index","findIndex","splice","funcAddQuestion","funcRemoveQuestion","funcQuestionChange","funcKeyPress","event"],"mappings":"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","sourcesContent":["import { observable, action, makeObservable, toJS, computed } from 'mobx';\n\nclass UkStore {\n  constructor() {\n    makeObservable(this);\n  }\n\n  // 서버에서 받아온 uk 리스트를 담을 배열\n  @observable\n  _uks = [];\n\n  // 현재 입력 되고 있는 정보를 담을 오브젝트\n  @observable\n  _target = {\n    id: null,\n    name: '',\n    des: '',\n    question: '',\n    questions: [],\n  };\n\n  @computed\n  get uks() {\n    return toJS(this._uks);\n  }\n\n  @computed\n  get target() {\n    return toJS(this._target);\n  }\n\n  @computed\n  get question() {\n    return this._question;\n  }\n\n  @action\n  clear() {\n    this._target = {\n      id: null,\n      name: '',\n      des: '',\n      questions: [],\n    };\n  }\n\n  //  **** UK 관련 함수 ****\n\n  @action\n  funcTargetOnChange(key, value) {\n    this._target = {\n      ...this._target,\n      [key]: value,\n    };\n  }\n\n  @action\n  funcSelectedUk(target) {\n    this._target = target;\n  }\n\n  @action\n  funcAddUk(target) {\n    this._uks.push(target);\n    this.funcSelectedUk(target);\n  }\n\n  @action\n  funcUpdateUk() {\n    let foundUk = this._uks.find(uk => uk.id === this._target.id); // find 주어진 조건을 만족하는 첫번째 요소 값을 반환 else undefined\n    foundUk.name = this._target.name;\n    foundUk.des = this._target.des;\n    foundUk.questions = this.target.questions;\n  }\n\n  @action\n  funcRemoveUk() {\n    let index = this._uks.findIndex(uk => uk.id === this._target.id);\n    if (index > -1) {\n      this._uks.splice(index, 1);\n    }\n    this.clear();\n  }\n\n  // **** Question 관련 함수 ****\n  @action\n  funcAddQuestion(question) {\n    this.target.questions.push(question);\n    this._question = '';\n  }\n\n  @action\n  funcRemoveQuestion(id) {\n    let index = this.target.questions.findIndex(question => question.id === id);\n    if (index > -1) {\n      this.target.questions.splice(index, 1);\n    }\n  }\n  @action\n  funcQuestionChange(question) {\n    this._question = question;\n  }\n\n  @action\n  funcKeyPress(event, question) {\n    if (event.key === 'Enter') {\n      this.funcAddQuestion(question);\n    }\n  }\n}\n\nexport default new UkStore();\n"]},"metadata":{},"sourceType":"module"}