{"ast":null,"code":"import _initializerDefineProperty from \"/Users/yh/Desktop/github/workspace/kdb_studio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/initializerDefineProperty\";\nimport _applyDecoratedDescriptor from \"/Users/yh/Desktop/github/workspace/kdb_studio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/applyDecoratedDescriptor\";\nimport _initializerWarningHelper from \"/Users/yh/Desktop/github/workspace/kdb_studio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/initializerWarningHelper\";\n\nvar _class, _descriptor, _descriptor2;\n\nimport { observable, makeObservable, action, computed, toJS } from 'mobx';\nimport generateId from '../../IDGenerator';\nlet ExStore = (_class = class ExStore {\n  constructor() {\n    _initializerDefineProperty(this, \"_target\", _descriptor, this);\n\n    _initializerDefineProperty(this, \"_data\", _descriptor2, this);\n\n    makeObservable(this);\n  }\n\n  get target() {\n    return toJS(this._target);\n  }\n\n  funcSelected(target) {\n    this._target = target;\n  }\n\n  get data() {\n    return toJS(this._data);\n  }\n\n  funcAddRootUk() {\n    let tmp = generateId(5);\n    let object = {\n      id: tmp,\n      name: tmp\n    };\n\n    this._data.push(object);\n  }\n\n  funcAddChildUk() {\n    this.funcChangeTarget();\n  } //   @action\n  //   funcFindeIndex() {\n  //     // 선택한 uk의 children을 추가한 target 생성\n  //     this.funcChangeTarget();\n  //     // 1 디렉토리에 추가할 경우\n  //     let findindex = this._data.findIndex(i => i.id === this._target.id);\n  //     this._data.splice(findindex, 1, this._target);\n  //     // 2 디렉토리에 추가할때\n  //     let rootIndex = this._data.findIndex(i => i.id === this._target.parent);\n  //     let obj = this._data.find(i => i.id === this._target.parent);\n  //     let findindex2 = obj.children.findIndex(i => i.id === this._target.id);\n  //     obj.children.splice(findindex2, 1, this._target);\n  //     this._data.splice(rootIndex, 1, obj);\n  //     // 3 디렉토리에 추가할때\n  //     let rootIndex2 = this._data.findIndex(i => i.id === this._tareget.root);\n  //     let obj2 = this._data.find(i => i.id === this._target.root);\n  //     let obj3 = obj2.children.find(i => i.id === this._target.parent);\n  //     let findindex3 = obj2.children.map(i => i.id === this._target.parent);\n  //     let findindex4 = obj3.children.findIndex(i => i.id === this._target.id);\n  //     obj3.children.splice(findindex4, 1, this._target);\n  //     obj2.children.splice(findindex3, 1, obj3);\n  //     this._data.splice(rootIndex2, 1, obj2);\n  //     // 4 디렉토리 추가할때\n  //     // 현재 선택한 아이템의 루트가 일치할때 인덱스 저장\n  //   }\n\n\n  funcChangeTarget() {\n    let tmp = generateId(5);\n    let child = {\n      id: tmp,\n      name: tmp\n    };\n    const haveChildren = ('children' in this._target);\n\n    if (haveChildren === true) {\n      this._target = { ...this._target,\n        ...this._target.children.push(child)\n      };\n    } else {\n      this._target = { ...this._target,\n        children: [child]\n      };\n    }\n\n    console.log(toJS(this._target));\n\n    let ff = this._data.findIndex(i => i.id === this._target.id);\n\n    this._data.splice(ff, 1, this._target);\n  }\n\n}, (_descriptor = _applyDecoratedDescriptor(_class.prototype, \"_target\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return {\n      root: null,\n      parent: null,\n      id: null,\n      name: '',\n      children: []\n    };\n  }\n}), _applyDecoratedDescriptor(_class.prototype, \"target\", [computed], Object.getOwnPropertyDescriptor(_class.prototype, \"target\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"funcSelected\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"funcSelected\"), _class.prototype), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, \"_data\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return [{\n      parentId: 0,\n      id: 0\n    }, {\n      id: '1',\n      name: '1',\n      children: [{\n        id: '2',\n        name: '2',\n        children: [{\n          id: '8',\n          name: '8'\n        }]\n      }, {\n        id: '3',\n        name: '3',\n        children: [{\n          id: '4',\n          name: '4'\n        }]\n      }]\n    } // {\n    //   id: '9',\n    //   name: '9',\n    //   children: [\n    //     {\n    //       id: '5',\n    //       name: '5',\n    //     },\n    //     {\n    //       id: '6',\n    //       name: '6',\n    //       children: [\n    //         {\n    //           id: '7',\n    //           name: '7',\n    //         },\n    //       ],\n    //     },\n    //   ],\n    // },\n    ];\n  }\n}), _applyDecoratedDescriptor(_class.prototype, \"data\", [computed], Object.getOwnPropertyDescriptor(_class.prototype, \"data\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"funcAddRootUk\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"funcAddRootUk\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"funcAddChildUk\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"funcAddChildUk\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"funcChangeTarget\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"funcChangeTarget\"), _class.prototype)), _class);\nexport default new ExStore();","map":{"version":3,"sources":["/Users/yh/Desktop/github/workspace/kdb_studio/src/uk/store/ExStore.js"],"names":["observable","makeObservable","action","computed","toJS","generateId","ExStore","constructor","target","_target","funcSelected","data","_data","funcAddRootUk","tmp","object","id","name","push","funcAddChildUk","funcChangeTarget","child","haveChildren","children","console","log","ff","findIndex","i","splice","root","parent","parentId"],"mappings":";;;;;;AAAA,SAASA,UAAT,EAAqBC,cAArB,EAAqCC,MAArC,EAA6CC,QAA7C,EAAuDC,IAAvD,QAAmE,MAAnE;AACA,OAAOC,UAAP,MAAuB,mBAAvB;IAEMC,O,aAAN,MAAMA,OAAN,CAAc;AACZC,EAAAA,WAAW,GAAG;AAAA;;AAAA;;AACZN,IAAAA,cAAc,CAAC,IAAD,CAAd;AACD;;AAYS,MAANO,MAAM,GAAG;AACX,WAAOJ,IAAI,CAAC,KAAKK,OAAN,CAAX;AACD;;AAGDC,EAAAA,YAAY,CAACF,MAAD,EAAS;AACnB,SAAKC,OAAL,GAAeD,MAAf;AACD;;AAsDO,MAAJG,IAAI,GAAG;AACT,WAAOP,IAAI,CAAC,KAAKQ,KAAN,CAAX;AACD;;AAGDC,EAAAA,aAAa,GAAG;AACd,QAAIC,GAAG,GAAGT,UAAU,CAAC,CAAD,CAApB;AACA,QAAIU,MAAM,GAAG;AACXC,MAAAA,EAAE,EAAEF,GADO;AAEXG,MAAAA,IAAI,EAAEH;AAFK,KAAb;;AAIA,SAAKF,KAAL,CAAWM,IAAX,CAAgBH,MAAhB;AACD;;AAGDI,EAAAA,cAAc,GAAG;AACf,SAAKC,gBAAL;AACD,GA7FW,CA+FZ;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGAA,EAAAA,gBAAgB,GAAG;AACjB,QAAIN,GAAG,GAAGT,UAAU,CAAC,CAAD,CAApB;AACA,QAAIgB,KAAK,GAAG;AACVL,MAAAA,EAAE,EAAEF,GADM;AAEVG,MAAAA,IAAI,EAAEH;AAFI,KAAZ;AAKA,UAAMQ,YAAY,IAAG,cAAc,KAAKb,OAAtB,CAAlB;;AAEA,QAAIa,YAAY,KAAK,IAArB,EAA2B;AACzB,WAAKb,OAAL,GAAe,EACb,GAAG,KAAKA,OADK;AAEb,WAAG,KAAKA,OAAL,CAAac,QAAb,CAAsBL,IAAtB,CAA2BG,KAA3B;AAFU,OAAf;AAID,KALD,MAKO;AACL,WAAKZ,OAAL,GAAe,EACb,GAAG,KAAKA,OADK;AAEbc,QAAAA,QAAQ,EAAE,CAACF,KAAD;AAFG,OAAf;AAID;;AACDG,IAAAA,OAAO,CAACC,GAAR,CAAYrB,IAAI,CAAC,KAAKK,OAAN,CAAhB;;AAEA,QAAIiB,EAAE,GAAG,KAAKd,KAAL,CAAWe,SAAX,CAAqBC,CAAC,IAAIA,CAAC,CAACZ,EAAF,KAAS,KAAKP,OAAL,CAAaO,EAAhD,CAAT;;AAEA,SAAKJ,KAAL,CAAWiB,MAAX,CAAkBH,EAAlB,EAAsB,CAAtB,EAAyB,KAAKjB,OAA9B;AACD;;AAzJW,C,yEAKXT,U;;;;;WACS;AACR8B,MAAAA,IAAI,EAAE,IADE;AAERC,MAAAA,MAAM,EAAE,IAFA;AAGRf,MAAAA,EAAE,EAAE,IAHI;AAIRC,MAAAA,IAAI,EAAE,EAJE;AAKRM,MAAAA,QAAQ,EAAE;AALF,K;;2DAQTpB,Q,gJAKAD,M,8JAKAF,U;;;;;WACO,CACN;AAAEgC,MAAAA,QAAQ,EAAE,CAAZ;AAAehB,MAAAA,EAAE,EAAE;AAAnB,KADM,EAEN;AACEA,MAAAA,EAAE,EAAE,GADN;AAEEC,MAAAA,IAAI,EAAE,GAFR;AAGEM,MAAAA,QAAQ,EAAE,CACR;AACEP,QAAAA,EAAE,EAAE,GADN;AAEEC,QAAAA,IAAI,EAAE,GAFR;AAGEM,QAAAA,QAAQ,EAAE,CACR;AACEP,UAAAA,EAAE,EAAE,GADN;AAEEC,UAAAA,IAAI,EAAE;AAFR,SADQ;AAHZ,OADQ,EAWR;AACED,QAAAA,EAAE,EAAE,GADN;AAEEC,QAAAA,IAAI,EAAE,GAFR;AAGEM,QAAAA,QAAQ,EAAE,CACR;AACEP,UAAAA,EAAE,EAAE,GADN;AAEEC,UAAAA,IAAI,EAAE;AAFR,SADQ;AAHZ,OAXQ;AAHZ,KAFM,CA4BN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA/CM,K;;yDAkDPd,Q,+IAKAD,M,yJAUAA,M,4JAqCAA,M;AA6BH,eAAe,IAAII,OAAJ,EAAf","sourcesContent":["import { observable, makeObservable, action, computed, toJS } from 'mobx';\nimport generateId from '../../IDGenerator';\n\nclass ExStore {\n  constructor() {\n    makeObservable(this);\n  }\n\n  @observable\n  _target = {\n    root: null,\n    parent: null,\n    id: null,\n    name: '',\n    children: [],\n  };\n\n  @computed\n  get target() {\n    return toJS(this._target);\n  }\n\n  @action\n  funcSelected(target) {\n    this._target = target;\n  }\n\n  @observable\n  _data = [\n    { parentId: 0, id: 0 },\n    {\n      id: '1',\n      name: '1',\n      children: [\n        {\n          id: '2',\n          name: '2',\n          children: [\n            {\n              id: '8',\n              name: '8',\n            },\n          ],\n        },\n        {\n          id: '3',\n          name: '3',\n          children: [\n            {\n              id: '4',\n              name: '4',\n            },\n          ],\n        },\n      ],\n    },\n    // {\n    //   id: '9',\n    //   name: '9',\n    //   children: [\n    //     {\n    //       id: '5',\n    //       name: '5',\n    //     },\n    //     {\n    //       id: '6',\n    //       name: '6',\n    //       children: [\n    //         {\n    //           id: '7',\n    //           name: '7',\n    //         },\n    //       ],\n    //     },\n    //   ],\n    // },\n  ];\n\n  @computed\n  get data() {\n    return toJS(this._data);\n  }\n\n  @action\n  funcAddRootUk() {\n    let tmp = generateId(5);\n    let object = {\n      id: tmp,\n      name: tmp,\n    };\n    this._data.push(object);\n  }\n\n  @action\n  funcAddChildUk() {\n    this.funcChangeTarget();\n  }\n\n  //   @action\n  //   funcFindeIndex() {\n  //     // 선택한 uk의 children을 추가한 target 생성\n  //     this.funcChangeTarget();\n\n  //     // 1 디렉토리에 추가할 경우\n  //     let findindex = this._data.findIndex(i => i.id === this._target.id);\n  //     this._data.splice(findindex, 1, this._target);\n\n  //     // 2 디렉토리에 추가할때\n  //     let rootIndex = this._data.findIndex(i => i.id === this._target.parent);\n  //     let obj = this._data.find(i => i.id === this._target.parent);\n\n  //     let findindex2 = obj.children.findIndex(i => i.id === this._target.id);\n  //     obj.children.splice(findindex2, 1, this._target);\n\n  //     this._data.splice(rootIndex, 1, obj);\n\n  //     // 3 디렉토리에 추가할때\n  //     let rootIndex2 = this._data.findIndex(i => i.id === this._tareget.root);\n  //     let obj2 = this._data.find(i => i.id === this._target.root);\n  //     let obj3 = obj2.children.find(i => i.id === this._target.parent);\n\n  //     let findindex3 = obj2.children.map(i => i.id === this._target.parent);\n  //     let findindex4 = obj3.children.findIndex(i => i.id === this._target.id);\n  //     obj3.children.splice(findindex4, 1, this._target);\n  //     obj2.children.splice(findindex3, 1, obj3);\n  //     this._data.splice(rootIndex2, 1, obj2);\n  //     // 4 디렉토리 추가할때\n  //     // 현재 선택한 아이템의 루트가 일치할때 인덱스 저장\n  //   }\n\n  @action\n  funcChangeTarget() {\n    let tmp = generateId(5);\n    let child = {\n      id: tmp,\n      name: tmp,\n    };\n\n    const haveChildren = 'children' in this._target;\n\n    if (haveChildren === true) {\n      this._target = {\n        ...this._target,\n        ...this._target.children.push(child),\n      };\n    } else {\n      this._target = {\n        ...this._target,\n        children: [child],\n      };\n    }\n    console.log(toJS(this._target));\n\n    let ff = this._data.findIndex(i => i.id === this._target.id);\n\n    this._data.splice(ff, 1, this._target);\n  }\n}\n\nexport default new ExStore();\n"]},"metadata":{},"sourceType":"module"}