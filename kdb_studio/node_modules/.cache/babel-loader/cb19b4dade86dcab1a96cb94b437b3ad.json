{"ast":null,"code":"var _class;\n\nimport autobind from 'autobind-decorator';\nimport { extendObservable } from 'mobx';\n\nlet EkdbModel = autobind(_class = class EkdbModel {\n  // Property와 값을 target object에 합쳐준다.\n  // 관찰 가능한 Property로 만들어 추가해준다.\n  // 렌더링 대상이 되는 값으로 만들어 추가해준다.\n  constructor(ekdb) {\n    extendObservable(this, ekdb);\n  } // 1. ekdbs가 비어있는 경우 그대로 빈 배열 리턴\n  // 2. ekdbs가 비어있지 않을 경우 각 원소를 EkdbModel로 감싸서 리턴\n\n\n  static fromApiModels(ekdbs) {\n    // if (!Array.isArray(ekdbs)) {\n    if (ekdbs.length === 0) {\n      return [];\n    }\n\n    return ekdbs.map(ekdb => EkdbModel.fromApiModel(ekdb));\n  } // BE에서 받아온 데이터를\n  // EkdbStore에 있는 데이터 형식으로 최적화\n  // key : value 재설정\n\n\n  static fromApiModel(ekdb) {\n    return new EkdbModel({\n      id: ekdb.DB_ID,\n      name: ekdb.EKDB_NAME,\n      des: ekdb.EKDB_DES\n    });\n  }\n\n}) || _class;\n\nexport default EkdbModel;","map":{"version":3,"sources":["/Users/yh/Desktop/workspace/kdb_studio/src/ekdb/model/EkdbModel.js"],"names":["autobind","extendObservable","EkdbModel","constructor","ekdb","fromApiModels","ekdbs","length","map","fromApiModel","id","DB_ID","name","EKDB_NAME","des","EKDB_DES"],"mappings":";;AAAA,OAAOA,QAAP,MAAqB,oBAArB;AACA,SAASC,gBAAT,QAAiC,MAAjC;;IAGMC,S,GADLF,Q,UAAD,MACME,SADN,CACgB;AACd;AACA;AACA;AACAC,EAAAA,WAAW,CAACC,IAAD,EAAO;AAChBH,IAAAA,gBAAgB,CAAC,IAAD,EAAOG,IAAP,CAAhB;AACD,GANa,CAQd;AACA;;;AACoB,SAAbC,aAAa,CAACC,KAAD,EAAQ;AAC1B;AACA,QAAIA,KAAK,CAACC,MAAN,KAAiB,CAArB,EAAwB;AACtB,aAAO,EAAP;AACD;;AACD,WAAOD,KAAK,CAACE,GAAN,CAAUJ,IAAI,IAAIF,SAAS,CAACO,YAAV,CAAuBL,IAAvB,CAAlB,CAAP;AACD,GAhBa,CAkBd;AACA;AACA;;;AACmB,SAAZK,YAAY,CAACL,IAAD,EAAO;AACxB,WAAO,IAAIF,SAAJ,CAAc;AACnBQ,MAAAA,EAAE,EAAEN,IAAI,CAACO,KADU;AAEnBC,MAAAA,IAAI,EAAER,IAAI,CAACS,SAFQ;AAGnBC,MAAAA,GAAG,EAAEV,IAAI,CAACW;AAHS,KAAd,CAAP;AAKD;;AA3Ba,C;;AA8BhB,eAAeb,SAAf","sourcesContent":["import autobind from 'autobind-decorator';\nimport { extendObservable } from 'mobx';\n\n@autobind\nclass EkdbModel {\n  // Property와 값을 target object에 합쳐준다.\n  // 관찰 가능한 Property로 만들어 추가해준다.\n  // 렌더링 대상이 되는 값으로 만들어 추가해준다.\n  constructor(ekdb) {\n    extendObservable(this, ekdb);\n  }\n\n  // 1. ekdbs가 비어있는 경우 그대로 빈 배열 리턴\n  // 2. ekdbs가 비어있지 않을 경우 각 원소를 EkdbModel로 감싸서 리턴\n  static fromApiModels(ekdbs) {\n    // if (!Array.isArray(ekdbs)) {\n    if (ekdbs.length === 0) {\n      return [];\n    }\n    return ekdbs.map(ekdb => EkdbModel.fromApiModel(ekdb));\n  }\n\n  // BE에서 받아온 데이터를\n  // EkdbStore에 있는 데이터 형식으로 최적화\n  // key : value 재설정\n  static fromApiModel(ekdb) {\n    return new EkdbModel({\n      id: ekdb.DB_ID,\n      name: ekdb.EKDB_NAME,\n      des: ekdb.EKDB_DES,\n    });\n  }\n}\n\nexport default EkdbModel;\n"]},"metadata":{},"sourceType":"module"}