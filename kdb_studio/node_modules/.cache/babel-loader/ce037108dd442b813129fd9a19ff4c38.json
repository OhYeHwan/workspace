{"ast":null,"code":"import _initializerDefineProperty from \"/Users/yh/Desktop/github/workspace/kdb_studio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/initializerDefineProperty\";\nimport _applyDecoratedDescriptor from \"/Users/yh/Desktop/github/workspace/kdb_studio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/applyDecoratedDescriptor\";\nimport _initializerWarningHelper from \"/Users/yh/Desktop/github/workspace/kdb_studio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/initializerWarningHelper\";\n\nvar _class, _descriptor, _descriptor2;\n\nimport { observable, makeObservable, action, computed, toJS } from 'mobx';\nimport generateId from '../../IDGenerator';\nlet ExStore = (_class = class ExStore {\n  constructor() {\n    _initializerDefineProperty(this, \"_target\", _descriptor, this);\n\n    _initializerDefineProperty(this, \"_data\", _descriptor2, this);\n\n    makeObservable(this);\n  }\n\n  get target() {\n    return toJS(this._target);\n  }\n\n  funcSelected(target) {\n    this._target = target;\n  }\n\n  funcTreeModel(arrayList, rootId) {\n    let rootNodes = [];\n\n    let traverse = function (nodes, item, index) {\n      if (nodes instanceof Array) {\n        return nodes.some(function (node) {\n          if (node.id === item.parentId) {\n            node.children = node.children || [];\n            return node.children.push(arrayList.splice(index, 1)[0]);\n          }\n\n          return traverse(node.children, item, index);\n        });\n      }\n    };\n\n    while (arrayList.length > 0) {\n      arrayList.some(function (item, index) {\n        if (item.parentId === rootId) {\n          return rootNodes.push(arrayList.splice(index, 1)[0]);\n        }\n\n        return traverse(rootNodes, item, index);\n      });\n    }\n\n    return rootNodes;\n  }\n\n  get data() {\n    return toJS(this._data);\n  }\n\n  funcAddRootUk() {\n    let tmp = generateId(5);\n    let object = {\n      id: tmp,\n      name: tmp\n    };\n\n    this._data.push(object);\n  }\n\n  funcAddChildUk() {\n    this.funcChangeTarget();\n  } //   @action\n  //   funcFindeIndex() {\n  //     // 선택한 uk의 children을 추가한 target 생성\n  //     this.funcChangeTarget();\n  //     // 1 디렉토리에 추가할 경우\n  //     let findindex = this._data.findIndex(i => i.id === this._target.id);\n  //     this._data.splice(findindex, 1, this._target);\n  //     // 2 디렉토리에 추가할때\n  //     let rootIndex = this._data.findIndex(i => i.id === this._target.parent);\n  //     let obj = this._data.find(i => i.id === this._target.parent);\n  //     let findindex2 = obj.children.findIndex(i => i.id === this._target.id);\n  //     obj.children.splice(findindex2, 1, this._target);\n  //     this._data.splice(rootIndex, 1, obj);\n  //     // 3 디렉토리에 추가할때\n  //     let rootIndex2 = this._data.findIndex(i => i.id === this._tareget.root);\n  //     let obj2 = this._data.find(i => i.id === this._target.root);\n  //     let obj3 = obj2.children.find(i => i.id === this._target.parent);\n  //     let findindex3 = obj2.children.map(i => i.id === this._target.parent);\n  //     let findindex4 = obj3.children.findIndex(i => i.id === this._target.id);\n  //     obj3.children.splice(findindex4, 1, this._target);\n  //     obj2.children.splice(findindex3, 1, obj3);\n  //     this._data.splice(rootIndex2, 1, obj2);\n  //     // 4 디렉토리 추가할때\n  //     // 현재 선택한 아이템의 루트가 일치할때 인덱스 저장\n  //   }\n\n\n  funcChangeTarget() {\n    let tmp = generateId(5);\n    let child = {\n      id: tmp,\n      name: tmp\n    };\n    const haveChildren = ('children' in this._target);\n\n    if (haveChildren === true) {\n      this._target = { ...this._target,\n        ...this._target.children.push(child)\n      };\n    } else {\n      this._target = { ...this._target,\n        children: [child]\n      };\n    }\n\n    console.log(toJS(this._target));\n\n    let ff = this._data.findIndex(i => i.id === this._target.id);\n\n    this._data.splice(ff, 1, this._target);\n  }\n\n}, (_descriptor = _applyDecoratedDescriptor(_class.prototype, \"_target\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return {\n      root: null,\n      parent: null,\n      id: null,\n      name: '',\n      children: []\n    };\n  }\n}), _applyDecoratedDescriptor(_class.prototype, \"target\", [computed], Object.getOwnPropertyDescriptor(_class.prototype, \"target\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"funcSelected\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"funcSelected\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"funcTreeModel\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"funcTreeModel\"), _class.prototype), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, \"_data\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return [{\n      id: '1',\n      name: '1',\n      children: [{\n        id: '2',\n        name: '2',\n        children: [{\n          id: '8',\n          name: '8'\n        }]\n      }, {\n        id: '3',\n        name: '3',\n        children: [{\n          id: '4',\n          name: '4'\n        }]\n      }]\n    } // {\n    //   id: '9',\n    //   name: '9',\n    //   children: [\n    //     {\n    //       id: '5',\n    //       name: '5',\n    //     },\n    //     {\n    //       id: '6',\n    //       name: '6',\n    //       children: [\n    //         {\n    //           id: '7',\n    //           name: '7',\n    //         },\n    //       ],\n    //     },\n    //   ],\n    // },\n    ];\n  }\n}), _applyDecoratedDescriptor(_class.prototype, \"data\", [computed], Object.getOwnPropertyDescriptor(_class.prototype, \"data\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"funcAddRootUk\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"funcAddRootUk\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"funcAddChildUk\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"funcAddChildUk\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"funcChangeTarget\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"funcChangeTarget\"), _class.prototype)), _class);\nexport default new ExStore();","map":{"version":3,"sources":["/Users/yh/Desktop/github/workspace/kdb_studio/src/uk/store/ExStore.js"],"names":["observable","makeObservable","action","computed","toJS","generateId","ExStore","constructor","target","_target","funcSelected","funcTreeModel","arrayList","rootId","rootNodes","traverse","nodes","item","index","Array","some","node","id","parentId","children","push","splice","length","data","_data","funcAddRootUk","tmp","object","name","funcAddChildUk","funcChangeTarget","child","haveChildren","console","log","ff","findIndex","i","root","parent"],"mappings":"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","sourcesContent":["import { observable, makeObservable, action, computed, toJS } from 'mobx';\nimport generateId from '../../IDGenerator';\n\nclass ExStore {\n  constructor() {\n    makeObservable(this);\n  }\n\n  @observable\n  _target = {\n    root: null,\n    parent: null,\n    id: null,\n    name: '',\n    children: [],\n  };\n\n  @computed\n  get target() {\n    return toJS(this._target);\n  }\n\n  @action\n  funcSelected(target) {\n    this._target = target;\n  }\n\n  @action\n  funcTreeModel(arrayList, rootId) {\n    let rootNodes = [];\n    let traverse = function (nodes, item, index) {\n      if (nodes instanceof Array) {\n        return nodes.some(function (node) {\n          if (node.id === item.parentId) {\n            node.children = node.children || [];\n            return node.children.push(arrayList.splice(index, 1)[0]);\n          }\n          return traverse(node.children, item, index);\n        });\n      }\n    };\n\n    while (arrayList.length > 0) {\n      arrayList.some(function (item, index) {\n        if (item.parentId === rootId) {\n          return rootNodes.push(arrayList.splice(index, 1)[0]);\n        }\n        return traverse(rootNodes, item, index);\n      });\n    }\n    return rootNodes;\n  }\n\n  @observable\n  _data = [\n    {\n      id: '1',\n      name: '1',\n      children: [\n        {\n          id: '2',\n          name: '2',\n          children: [\n            {\n              id: '8',\n              name: '8',\n            },\n          ],\n        },\n        {\n          id: '3',\n          name: '3',\n          children: [\n            {\n              id: '4',\n              name: '4',\n            },\n          ],\n        },\n      ],\n    },\n    // {\n    //   id: '9',\n    //   name: '9',\n    //   children: [\n    //     {\n    //       id: '5',\n    //       name: '5',\n    //     },\n    //     {\n    //       id: '6',\n    //       name: '6',\n    //       children: [\n    //         {\n    //           id: '7',\n    //           name: '7',\n    //         },\n    //       ],\n    //     },\n    //   ],\n    // },\n  ];\n\n  @computed\n  get data() {\n    return toJS(this._data);\n  }\n\n  @action\n  funcAddRootUk() {\n    let tmp = generateId(5);\n    let object = {\n      id: tmp,\n      name: tmp,\n    };\n    this._data.push(object);\n  }\n\n  @action\n  funcAddChildUk() {\n    this.funcChangeTarget();\n  }\n\n  //   @action\n  //   funcFindeIndex() {\n  //     // 선택한 uk의 children을 추가한 target 생성\n  //     this.funcChangeTarget();\n\n  //     // 1 디렉토리에 추가할 경우\n  //     let findindex = this._data.findIndex(i => i.id === this._target.id);\n  //     this._data.splice(findindex, 1, this._target);\n\n  //     // 2 디렉토리에 추가할때\n  //     let rootIndex = this._data.findIndex(i => i.id === this._target.parent);\n  //     let obj = this._data.find(i => i.id === this._target.parent);\n\n  //     let findindex2 = obj.children.findIndex(i => i.id === this._target.id);\n  //     obj.children.splice(findindex2, 1, this._target);\n\n  //     this._data.splice(rootIndex, 1, obj);\n\n  //     // 3 디렉토리에 추가할때\n  //     let rootIndex2 = this._data.findIndex(i => i.id === this._tareget.root);\n  //     let obj2 = this._data.find(i => i.id === this._target.root);\n  //     let obj3 = obj2.children.find(i => i.id === this._target.parent);\n\n  //     let findindex3 = obj2.children.map(i => i.id === this._target.parent);\n  //     let findindex4 = obj3.children.findIndex(i => i.id === this._target.id);\n  //     obj3.children.splice(findindex4, 1, this._target);\n  //     obj2.children.splice(findindex3, 1, obj3);\n  //     this._data.splice(rootIndex2, 1, obj2);\n  //     // 4 디렉토리 추가할때\n  //     // 현재 선택한 아이템의 루트가 일치할때 인덱스 저장\n  //   }\n\n  @action\n  funcChangeTarget() {\n    let tmp = generateId(5);\n    let child = {\n      id: tmp,\n      name: tmp,\n    };\n\n    const haveChildren = 'children' in this._target;\n\n    if (haveChildren === true) {\n      this._target = {\n        ...this._target,\n        ...this._target.children.push(child),\n      };\n    } else {\n      this._target = {\n        ...this._target,\n        children: [child],\n      };\n    }\n    console.log(toJS(this._target));\n\n    let ff = this._data.findIndex(i => i.id === this._target.id);\n\n    this._data.splice(ff, 1, this._target);\n  }\n}\n\nexport default new ExStore();\n"]},"metadata":{},"sourceType":"module"}