{"ast":null,"code":"import _initializerDefineProperty from \"/Users/yh/Desktop/workspace/kdb_studio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/initializerDefineProperty\";\nimport _applyDecoratedDescriptor from \"/Users/yh/Desktop/workspace/kdb_studio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/applyDecoratedDescriptor\";\nimport _initializerWarningHelper from \"/Users/yh/Desktop/workspace/kdb_studio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/initializerWarningHelper\";\n\nvar _class, _descriptor, _descriptor2, _descriptor3;\n\nimport { observable, action, computed, makeObservable, toJS } from 'mobx';\nimport EkdbRepository from '../repository/EkdbRepository';\nlet EkdbStore = (_class = class EkdbStore {\n  // 데코레이터기법을 사용하기 위해서\n  // makeObservable 선언\n  constructor() {\n    _initializerDefineProperty(this, \"_ekdbs\", _descriptor, this);\n\n    _initializerDefineProperty(this, \"_target\", _descriptor2, this);\n\n    _initializerDefineProperty(this, \"_searchEkdb\", _descriptor3, this);\n\n    makeObservable(this);\n  } // 관찰 되어질\n  // ekdb 목록 배열\n\n\n  // observable이 적용된 변수들은\n  // 몹엑스 스토어가 관리하는 데이터,\n  // 객체 형태로 랩핑이 된다.\n  // 실제 자바스크립트 객체로 변경을 원할시에\n  // get ekdbs() {\n  //   return this._ekdbs ? this.ekdbs.slice() : [];\n  // }\n  // [Proxy], [Proxy], [Proxy] ...\n  //\n  // 따라서 toJS를 사용해야함\n  // observable 형태로 관리되어지는 객체를\n  // 자바스크립트 객체로 변환해준다.\n  // computed : observable 데이터의 변경이 일어나지 않으면\n  // 최종으로 캐싱하고 있는 데이터를 리턴해준다.\n  get ekdbs() {\n    return toJS(this._ekdbs);\n  }\n\n  get target() {\n    return toJS(this._target);\n  }\n\n  get searchText() {\n    return this._searchText;\n  }\n\n  clear() {\n    this._target = {\n      name: '',\n      des: ''\n    };\n  }\n\n  funcGet() {\n    EkdbRepository.funcGet().then(action(response => {\n      console.log(response);\n      console.log(JSON.stringify(response));\n      this._ekdbs = toJS(response);\n      console.log(this._ekdbs);\n      return this._ekdbs;\n    })).catch(e => {\n      alert(e);\n    });\n  } // 현재 입력되어있는 정보 (_target)을\n  // Repository의 Restful Api를 이용하여 서버에 전송\n  // id를 줘야한다면 여기서 줘야될듯\n\n\n  funcInsert() {\n    const data = {\n      EKDB_NAME: this._target.name,\n      EKDB_DES: this._target.des\n    };\n    EkdbRepository.funcInsert(data).then(action(response => {\n      console.log(JSON.stringify(response));\n      alert('insert success!');\n      this.funcGet();\n      this.clear();\n    })).catch(e => alert(e));\n  }\n\n  funcUpdate() {\n    const data = {\n      EKDB_DES: this._target.des\n    };\n    EkdbRepository.funcUpdate(this._target.name, data).then(action(response => {\n      console.log(response); // << 확인해보고 정상적으로 출력되면\n      //response.status에 따라서 로직 설정하기\n\n      console.log(JSON.stringify(response));\n      alert('update success!');\n      this.funcGet();\n      this.clear();\n    })).catch(e => {\n      alert(e);\n    });\n  }\n\n  funcDel() {\n    EkdbRepository.funcDel(this._target.name).then(action(response => {\n      console.log(JSON.stringify(response));\n      alert('delete success!');\n      this.funcGet();\n    })).catch(e => {\n      alert(e);\n    });\n  } // 이벤트가 발생할 때 마다\n  // _target의 정보를 변경\n  // 기존에 가지고 있는 _target 값을 복사한 뒤에\n  // 입력된 값을 변경\n\n\n  funcOnChange(key, value) {\n    this._target = { ...this._target,\n      [key]: value\n    };\n  } // searchText를 변경해주는 method\n\n\n  funcSearchEkdb(searchEkdb) {\n    this._searchEkdb = searchEkdb;\n  }\n\n}, (_descriptor = _applyDecoratedDescriptor(_class.prototype, \"_ekdbs\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return [];\n  }\n}), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, \"_target\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return {\n      name: '',\n      des: ''\n    };\n  }\n}), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, \"_searchEkdb\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return '';\n  }\n}), _applyDecoratedDescriptor(_class.prototype, \"ekdbs\", [computed], Object.getOwnPropertyDescriptor(_class.prototype, \"ekdbs\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"target\", [computed], Object.getOwnPropertyDescriptor(_class.prototype, \"target\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"searchText\", [computed], Object.getOwnPropertyDescriptor(_class.prototype, \"searchText\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"clear\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"clear\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"funcGet\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"funcGet\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"funcInsert\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"funcInsert\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"funcUpdate\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"funcUpdate\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"funcDel\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"funcDel\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"funcOnChange\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"funcOnChange\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"funcSearchEkdb\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"funcSearchEkdb\"), _class.prototype)), _class);\nexport default new EkdbStore(); // To Do\n// 1. response.status에 따라서 로직설정\n// 2. api 설계 문서 확인하고 변수 재설정\n// 3. 실험\n// 4. 주석 작성\n// 5. UK 페이지 관련 Mobx 구조 설계","map":{"version":3,"sources":["/Users/yh/Desktop/workspace/kdb_studio/src/ekdb/store/EkdbStore.js"],"names":["observable","action","computed","makeObservable","toJS","EkdbRepository","EkdbStore","constructor","ekdbs","_ekdbs","target","_target","searchText","_searchText","clear","name","des","funcGet","then","response","console","log","JSON","stringify","catch","e","alert","funcInsert","data","EKDB_NAME","EKDB_DES","funcUpdate","funcDel","funcOnChange","key","value","funcSearchEkdb","searchEkdb","_searchEkdb"],"mappings":"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","sourcesContent":["import { observable, action, computed, makeObservable, toJS } from 'mobx';\nimport EkdbRepository from '../repository/EkdbRepository';\n\nclass EkdbStore {\n  // 데코레이터기법을 사용하기 위해서\n  // makeObservable 선언\n  constructor() {\n    makeObservable(this);\n  }\n\n  // 관찰 되어질\n  // ekdb 목록 배열\n  @observable\n  _ekdbs = [];\n\n  // 현재입력되는 정보\n  @observable\n  _target = {\n    name: '',\n    des: '',\n  };\n\n  @observable\n  _searchEkdb = '';\n\n  // observable이 적용된 변수들은\n  // 몹엑스 스토어가 관리하는 데이터,\n  // 객체 형태로 랩핑이 된다.\n\n  // 실제 자바스크립트 객체로 변경을 원할시에\n  // get ekdbs() {\n  //   return this._ekdbs ? this.ekdbs.slice() : [];\n  // }\n  // [Proxy], [Proxy], [Proxy] ...\n  //\n\n  // 따라서 toJS를 사용해야함\n  // observable 형태로 관리되어지는 객체를\n  // 자바스크립트 객체로 변환해준다.\n  // computed : observable 데이터의 변경이 일어나지 않으면\n  // 최종으로 캐싱하고 있는 데이터를 리턴해준다.\n  @computed\n  get ekdbs() {\n    return toJS(this._ekdbs);\n  }\n\n  @computed\n  get target() {\n    return toJS(this._target);\n  }\n\n  @computed\n  get searchText() {\n    return this._searchText;\n  }\n\n  @action\n  clear() {\n    this._target = {\n      name: '',\n      des: '',\n    };\n  }\n\n  @action\n  funcGet() {\n    EkdbRepository.funcGet()\n      .then(\n        action(response => {\n          console.log(response);\n          console.log(JSON.stringify(response));\n          this._ekdbs = toJS(response);\n          console.log(this._ekdbs);\n          return this._ekdbs;\n        }),\n      )\n      .catch(e => {\n        alert(e);\n      });\n  }\n\n  // 현재 입력되어있는 정보 (_target)을\n  // Repository의 Restful Api를 이용하여 서버에 전송\n  // id를 줘야한다면 여기서 줘야될듯\n  @action\n  funcInsert() {\n    const data = {\n      EKDB_NAME: this._target.name,\n      EKDB_DES: this._target.des,\n    };\n    EkdbRepository.funcInsert(data)\n      .then(\n        action(response => {\n          console.log(JSON.stringify(response));\n          alert('insert success!');\n          this.funcGet();\n          this.clear();\n        }),\n      )\n      .catch(e => alert(e));\n  }\n\n  @action\n  funcUpdate() {\n    const data = {\n      EKDB_DES: this._target.des,\n    };\n\n    EkdbRepository.funcUpdate(this._target.name, data)\n      .then(\n        action(response => {\n          console.log(response); // << 확인해보고 정상적으로 출력되면\n          //response.status에 따라서 로직 설정하기\n          console.log(JSON.stringify(response));\n          alert('update success!');\n          this.funcGet();\n          this.clear();\n        }),\n      )\n      .catch(e => {\n        alert(e);\n      });\n  }\n\n  @action\n  funcDel() {\n    EkdbRepository.funcDel(this._target.name)\n      .then(\n        action(response => {\n          console.log(JSON.stringify(response));\n          alert('delete success!');\n          this.funcGet();\n        }),\n      )\n      .catch(e => {\n        alert(e);\n      });\n  }\n\n  // 이벤트가 발생할 때 마다\n  // _target의 정보를 변경\n  // 기존에 가지고 있는 _target 값을 복사한 뒤에\n  // 입력된 값을 변경\n  @action\n  funcOnChange(key, value) {\n    this._target = {\n      ...this._target,\n      [key]: value,\n    };\n  }\n\n  // searchText를 변경해주는 method\n  @action\n  funcSearchEkdb(searchEkdb) {\n    this._searchEkdb = searchEkdb;\n  }\n}\n\nexport default new EkdbStore();\n\n// To Do\n// 1. response.status에 따라서 로직설정\n// 2. api 설계 문서 확인하고 변수 재설정\n// 3. 실험\n// 4. 주석 작성\n// 5. UK 페이지 관련 Mobx 구조 설계\n"]},"metadata":{},"sourceType":"module"}