{"ast":null,"code":"import _initializerDefineProperty from \"/Users/yh/Desktop/workspace/kdb_studio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/initializerDefineProperty\";\nimport _applyDecoratedDescriptor from \"/Users/yh/Desktop/workspace/kdb_studio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/applyDecoratedDescriptor\";\nimport _initializerWarningHelper from \"/Users/yh/Desktop/workspace/kdb_studio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/initializerWarningHelper\";\n\nvar _class, _descriptor, _descriptor2, _descriptor3;\n\nimport { observable, action, computed, makeObservable, toJS } from \"mobx\";\nlet XsdStore = (_class = class XsdStore {\n  constructor() {\n    _initializerDefineProperty(this, \"_xsd\", _descriptor, this);\n\n    _initializerDefineProperty(this, \"_xsds\", _descriptor2, this);\n\n    _initializerDefineProperty(this, \"_searchText\", _descriptor3, this);\n\n    makeObservable(this);\n  }\n\n  // _xsd 에 접근 할 수 있는 get method\n  get xsd() {\n    return this._xsd;\n  } // _xsds 에 접근 할 수 있는 get method\n\n\n  get xsds() {\n    return toJS(this._xsds);\n  }\n\n  get searchText() {\n    return this._searchText;\n  }\n\n  setXsdProps(name, value) {\n    this._xsd = { ...this._xsd,\n      [name]: value\n    };\n  }\n\n  setSearchText(searchText) {\n    this._searchText = searchText;\n  } // _xsds가 observable데이터이기때문에 action 추가\n\n\n  addXsd(xsd) {\n    // 중복기능 여기다 추가하면 될듯?\n    this._xsds.push(xsd);\n\n    this.selectedXsd(xsd);\n  }\n\n  selectedXsd(xsd) {\n    this._xsd = xsd;\n  }\n\n  updateXsd() {\n    let foundXsd = this._xsds.find(xsd => xsd.id === this._xsd.id);\n\n    foundXsd.file_name = this._xsd.file_name;\n    foundXsd.code = this._xsd.code; //this._xsd = {}; 에디터창비우기\n  }\n\n  removeXsd() {\n    let index = this._xsds.findIndex(xsd => xsd.id === this._xsd.id);\n\n    if (index > -1) {\n      this._xsds.splice(index, 1);\n    }\n\n    this._xsd = {};\n  }\n\n}, (_descriptor = _applyDecoratedDescriptor(_class.prototype, \"_xsd\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return {};\n  }\n}), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, \"_xsds\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return [{\n      id: \"1\",\n      file_name: \"food.xsd\",\n      code: \"dasdsads\"\n    }, {\n      id: \"2\",\n      file_name: \"order.xsd\",\n      code: '<xsd:element name=\"PurchaseOrder\" type=\"tns:PurchaseOrderType\"/>'\n    }, {\n      id: \"3\",\n      file_name: \"customersorders.xsd\",\n      code: \"<xs:element name='Customers'>\"\n    }];\n  }\n}), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, \"_searchText\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return \"\";\n  }\n}), _applyDecoratedDescriptor(_class.prototype, \"xsds\", [computed], Object.getOwnPropertyDescriptor(_class.prototype, \"xsds\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"setXsdProps\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"setXsdProps\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"setSearchText\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"setSearchText\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"addXsd\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"addXsd\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"selectedXsd\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"selectedXsd\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"updateXsd\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"updateXsd\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"removeXsd\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"removeXsd\"), _class.prototype)), _class);\nexport default new XsdStore();","map":{"version":3,"sources":["/Users/yh/Desktop/workspace/kdb_studio/src/stores/XsdStore.js"],"names":["observable","action","computed","makeObservable","toJS","XsdStore","constructor","xsd","_xsd","xsds","_xsds","searchText","_searchText","setXsdProps","name","value","setSearchText","addXsd","push","selectedXsd","updateXsd","foundXsd","find","id","file_name","code","removeXsd","index","findIndex","splice"],"mappings":";;;;;;AAAA,SAASA,UAAT,EAAqBC,MAArB,EAA6BC,QAA7B,EAAuCC,cAAvC,EAAuDC,IAAvD,QAAmE,MAAnE;IAEMC,Q,aAAN,MAAMA,QAAN,CAAe;AACbC,EAAAA,WAAW,GAAG;AAAA;;AAAA;;AAAA;;AACZH,IAAAA,cAAc,CAAC,IAAD,CAAd;AACD;;AA2BD;AACO,MAAHI,GAAG,GAAG;AACR,WAAO,KAAKC,IAAZ;AACD,GAjCY,CAmCb;;;AAEQ,MAAJC,IAAI,GAAG;AACT,WAAOL,IAAI,CAAC,KAAKM,KAAN,CAAX;AACD;;AAEa,MAAVC,UAAU,GAAG;AACf,WAAO,KAAKC,WAAZ;AACD;;AAGDC,EAAAA,WAAW,CAACC,IAAD,EAAOC,KAAP,EAAc;AACvB,SAAKP,IAAL,GAAY,EACV,GAAG,KAAKA,IADE;AAEV,OAACM,IAAD,GAAQC;AAFE,KAAZ;AAID;;AAGDC,EAAAA,aAAa,CAACL,UAAD,EAAa;AACxB,SAAKC,WAAL,GAAmBD,UAAnB;AACD,GAxDY,CA0Db;;;AAEAM,EAAAA,MAAM,CAACV,GAAD,EAAM;AACV;AACA,SAAKG,KAAL,CAAWQ,IAAX,CAAgBX,GAAhB;;AACA,SAAKY,WAAL,CAAiBZ,GAAjB;AACD;;AAGDY,EAAAA,WAAW,CAACZ,GAAD,EAAM;AACf,SAAKC,IAAL,GAAYD,GAAZ;AACD;;AAGDa,EAAAA,SAAS,GAAG;AACV,QAAIC,QAAQ,GAAG,KAAKX,KAAL,CAAWY,IAAX,CAAiBf,GAAD,IAASA,GAAG,CAACgB,EAAJ,KAAW,KAAKf,IAAL,CAAUe,EAA9C,CAAf;;AACAF,IAAAA,QAAQ,CAACG,SAAT,GAAqB,KAAKhB,IAAL,CAAUgB,SAA/B;AACAH,IAAAA,QAAQ,CAACI,IAAT,GAAgB,KAAKjB,IAAL,CAAUiB,IAA1B,CAHU,CAIV;AACD;;AAGDC,EAAAA,SAAS,GAAG;AACV,QAAIC,KAAK,GAAG,KAAKjB,KAAL,CAAWkB,SAAX,CAAsBrB,GAAD,IAASA,GAAG,CAACgB,EAAJ,KAAW,KAAKf,IAAL,CAAUe,EAAnD,CAAZ;;AACA,QAAII,KAAK,GAAG,CAAC,CAAb,EAAgB;AACd,WAAKjB,KAAL,CAAWmB,MAAX,CAAkBF,KAAlB,EAAyB,CAAzB;AACD;;AACD,SAAKnB,IAAL,GAAY,EAAZ;AACD;;AAtFY,C,sEAIZR,U;;;;;WACM,E;;yEAGNA,U;;;;;WACO,CACN;AACEuB,MAAAA,EAAE,EAAE,GADN;AAEEC,MAAAA,SAAS,EAAE,UAFb;AAGEC,MAAAA,IAAI,EAAE;AAHR,KADM,EAMN;AACEF,MAAAA,EAAE,EAAE,GADN;AAEEC,MAAAA,SAAS,EAAE,WAFb;AAGEC,MAAAA,IAAI,EAAE;AAHR,KANM,EAWN;AACEF,MAAAA,EAAE,EAAE,GADN;AAEEC,MAAAA,SAAS,EAAE,qBAFb;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAXM,C;;+EAkBPzB,U;;;;;WACa,E;;yDAQbE,Q,6IASAD,M,sJAQAA,M,iJAMAA,M,+IAOAA,M,kJAKAA,M,gJAQAA,M;AAUH,eAAe,IAAII,QAAJ,EAAf","sourcesContent":["import { observable, action, computed, makeObservable, toJS } from \"mobx\";\n\nclass XsdStore {\n  constructor() {\n    makeObservable(this);\n  }\n  @observable\n  _xsd = {}; // id, file_name, code\n\n  //xsd데이터들을 담을 배열객체\n  @observable\n  _xsds = [\n    {\n      id: \"1\",\n      file_name: \"food.xsd\",\n      code: \"dasdsads\",\n    },\n    {\n      id: \"2\",\n      file_name: \"order.xsd\",\n      code: '<xsd:element name=\"PurchaseOrder\" type=\"tns:PurchaseOrderType\"/>'\n    },\n    {\n      id: \"3\",\n      file_name: \"customersorders.xsd\",\n      code: \"<xs:element name='Customers'>\"\n    }\n  ];\n\n  @observable\n  _searchText = \"\";\n\n  // _xsd 에 접근 할 수 있는 get method\n  get xsd() {\n    return this._xsd;\n  }\n\n  // _xsds 에 접근 할 수 있는 get method\n  @computed\n  get xsds() {\n    return toJS(this._xsds);\n  }\n\n  get searchText() {\n    return this._searchText;\n  }\n\n  @action\n  setXsdProps(name, value) {\n    this._xsd = {\n      ...this._xsd,\n      [name]: value,\n    };\n  }\n\n  @action\n  setSearchText(searchText) {\n    this._searchText = searchText;\n  }\n\n  // _xsds가 observable데이터이기때문에 action 추가\n  @action\n  addXsd(xsd) {\n    // 중복기능 여기다 추가하면 될듯?\n    this._xsds.push(xsd);\n    this.selectedXsd(xsd);\n  }\n\n  @action\n  selectedXsd(xsd) {\n    this._xsd = xsd;\n  }\n\n  @action\n  updateXsd() {\n    let foundXsd = this._xsds.find((xsd) => xsd.id === this._xsd.id);\n    foundXsd.file_name = this._xsd.file_name;\n    foundXsd.code = this._xsd.code;\n    //this._xsd = {}; 에디터창비우기\n  }\n\n  @action\n  removeXsd() {\n    let index = this._xsds.findIndex((xsd) => xsd.id === this._xsd.id);\n    if (index > -1) {\n      this._xsds.splice(index, 1);\n    }\n    this._xsd = {};\n  }\n}\n\nexport default new XsdStore();\n"]},"metadata":{},"sourceType":"module"}