{"ast":null,"code":"var _class;\n\nimport autobind from 'autobind-decorator';\nimport { extendObservable } from 'mobx';\n\nlet UkModel = autobind(_class = class UkModel {\n  // Property와 값을 target object에 합쳐준다.\n  // 관찰 가능한 Property로 만들어 추가해준다.\n  // 렌더링 대상이 되는 값으로 만들어 추가해준다.\n  constructor(uk) {\n    extendObservable(this, uk);\n  } // 1. uks가 비어있는 경우 그대로 빈 배열 리턴\n  // 2. uks가 비어있지 않을 경우 각 원소를 UkModel로 감싸서 리턴\n\n\n  static fromApiModels(uks) {\n    // if (!Array.isArray(uks)) {\n    if (uks.length === 0) {\n      return [];\n    }\n\n    return uks.map(uk => UkModel.fromApiModel(uk));\n  } // BE에서 받아온 데이터를\n  // UkStore에 있는 데이터 형식으로 최적화\n  // key : value 재설정\n\n\n  static fromApiModel(uk) {\n    return new UkModel({\n      id: uk.ID,\n      name: uk.UK_NAME,\n      des: uk.DESCRIPTION\n    });\n  }\n\n}) || _class;\n\nexport default UkModel;","map":{"version":3,"sources":["/Users/yh/Desktop/github/workspace/kdb_studio/src/uk/model/UkModel.js"],"names":["autobind","extendObservable","UkModel","constructor","uk","fromApiModels","uks","length","map","fromApiModel","id","ID","name","UK_NAME","des","DESCRIPTION"],"mappings":";;AAAA,OAAOA,QAAP,MAAqB,oBAArB;AACA,SAASC,gBAAT,QAAiC,MAAjC;;IAGMC,O,GADLF,Q,UAAD,MACME,OADN,CACc;AACZ;AACA;AACA;AACAC,EAAAA,WAAW,CAACC,EAAD,EAAK;AACdH,IAAAA,gBAAgB,CAAC,IAAD,EAAOG,EAAP,CAAhB;AACD,GANW,CAQZ;AACA;;;AACoB,SAAbC,aAAa,CAACC,GAAD,EAAM;AACxB;AACA,QAAIA,GAAG,CAACC,MAAJ,KAAe,CAAnB,EAAsB;AACpB,aAAO,EAAP;AACD;;AACD,WAAOD,GAAG,CAACE,GAAJ,CAAQJ,EAAE,IAAIF,OAAO,CAACO,YAAR,CAAqBL,EAArB,CAAd,CAAP;AACD,GAhBW,CAkBZ;AACA;AACA;;;AACmB,SAAZK,YAAY,CAACL,EAAD,EAAK;AACtB,WAAO,IAAIF,OAAJ,CAAY;AACjBQ,MAAAA,EAAE,EAAEN,EAAE,CAACO,EADU;AAEjBC,MAAAA,IAAI,EAAER,EAAE,CAACS,OAFQ;AAGjBC,MAAAA,GAAG,EAAEV,EAAE,CAACW;AAHS,KAAZ,CAAP;AAKD;;AA3BW,C;;AA8Bd,eAAeb,OAAf","sourcesContent":["import autobind from 'autobind-decorator';\nimport { extendObservable } from 'mobx';\n\n@autobind\nclass UkModel {\n  // Property와 값을 target object에 합쳐준다.\n  // 관찰 가능한 Property로 만들어 추가해준다.\n  // 렌더링 대상이 되는 값으로 만들어 추가해준다.\n  constructor(uk) {\n    extendObservable(this, uk);\n  }\n\n  // 1. uks가 비어있는 경우 그대로 빈 배열 리턴\n  // 2. uks가 비어있지 않을 경우 각 원소를 UkModel로 감싸서 리턴\n  static fromApiModels(uks) {\n    // if (!Array.isArray(uks)) {\n    if (uks.length === 0) {\n      return [];\n    }\n    return uks.map(uk => UkModel.fromApiModel(uk));\n  }\n\n  // BE에서 받아온 데이터를\n  // UkStore에 있는 데이터 형식으로 최적화\n  // key : value 재설정\n  static fromApiModel(uk) {\n    return new UkModel({\n      id: uk.ID,\n      name: uk.UK_NAME,\n      des: uk.DESCRIPTION,\n    });\n  }\n}\n\nexport default UkModel;\n"]},"metadata":{},"sourceType":"module"}