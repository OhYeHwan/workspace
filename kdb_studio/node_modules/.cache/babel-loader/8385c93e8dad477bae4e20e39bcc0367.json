{"ast":null,"code":"import _initializerDefineProperty from \"/Users/yh/Desktop/github/workspace/kdb_studio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/initializerDefineProperty\";\nimport _applyDecoratedDescriptor from \"/Users/yh/Desktop/github/workspace/kdb_studio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/applyDecoratedDescriptor\";\nimport _initializerWarningHelper from \"/Users/yh/Desktop/github/workspace/kdb_studio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/initializerWarningHelper\";\n\nvar _class, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5;\n\nimport { observable, makeObservable, action, computed, toJS } from 'mobx';\nimport generateId from '../../IDGenerator';\nlet ExStore = (_class = class ExStore {\n  constructor() {\n    _initializerDefineProperty(this, \"_mode\", _descriptor, this);\n\n    _initializerDefineProperty(this, \"_target\", _descriptor2, this);\n\n    _initializerDefineProperty(this, \"_dupData\", _descriptor3, this);\n\n    _initializerDefineProperty(this, \"_dupData2\", _descriptor4, this);\n\n    this._beforeData = [];\n\n    _initializerDefineProperty(this, \"_data\", _descriptor5, this);\n\n    makeObservable(this);\n  }\n\n  get mode() {\n    return this._mode;\n  }\n\n  get target() {\n    return toJS(this._target);\n  }\n\n  funcSelected(target) {\n    this._target = target;\n  }\n\n  get dupData2() {\n    return toJS(this._dupData2);\n  }\n\n  funcAddDup(id) {\n    this._dupData2.push(id);\n\n    console.log(this._dupData2);\n  }\n\n  funcRemoveDup(id) {\n    let index = this._dupData2.findIndex(data => data.id === id);\n\n    if (index > -1) {\n      this._dupData2.splice(index, 1);\n    }\n\n    console.log(this.dupData2);\n  }\n\n  funcTreeModel(arrayList, rootId) {\n    let rootNodes = [];\n\n    let traverse = (nodes, item, index) => {\n      if (nodes instanceof Array) {\n        return nodes.some(node => {\n          if (node.id === item.parentId) {\n            node.children = node.children || [];\n            return node.children.push(arrayList.splice(index, 1)[0]);\n          }\n\n          return traverse(node.children, item, index);\n        });\n      }\n    };\n\n    while (arrayList.length > 0) {\n      arrayList.some((item, index) => {\n        if (item.parentId === rootId) {\n          return rootNodes.push(arrayList.splice(index, 1)[0]);\n        }\n\n        return traverse(rootNodes, item, index);\n      });\n    }\n\n    return rootNodes;\n  }\n\n  funcGet() {\n    this._dupData = [...this._beforeData];\n    this._dupData2 = [...this._beforeData];\n    this._data = this.funcTreeModel(this._dupData, 'root');\n  }\n\n  get data() {\n    return toJS(this._data);\n  }\n\n  funcAddRootUk() {\n    this._mode = true;\n    let tmp = generateId(5);\n    let object = {\n      parentId: 'root',\n      id: tmp,\n      name: 'undefinded',\n      des: 'undefinded'\n    };\n\n    this._beforeData.push(object);\n\n    this.funcSelected(object);\n    this.funcGet();\n  }\n\n  funcAddChildUk(target) {\n    this._beforeData.push(target);\n\n    this.funcSelected(target);\n    this.funcGet();\n  }\n\n  funcRemoveUk(id) {\n    let removeList = this.dfs(id);\n\n    while (removeList.length !== 0) {\n      let node = removeList.pop();\n\n      for (let i = 0; i < this._beforeData.length; i++) {\n        if (this._beforeData[i] === node) {\n          this._beforeData.splice(i, 1);\n\n          i--;\n        }\n      }\n    }\n\n    this.funcGet();\n  }\n\n  dfs(startId) {\n    // 탐색해야할 노드\n    let needVisitStack = []; // 탐색을 마친 노드\n\n    let visitedQueue = [];\n\n    let foundIndex = this._beforeData.findIndex(i => i.id === startId);\n\n    needVisitStack.push(this._beforeData[foundIndex]);\n\n    while (needVisitStack.length !== 0) {\n      const node = needVisitStack.pop();\n\n      if (!visitedQueue.includes(node)) {\n        visitedQueue.push(node);\n\n        let arrayList = this._beforeData.filter(i => i.parentId === node.id);\n\n        needVisitStack = [...needVisitStack, ...arrayList];\n      }\n    }\n\n    return visitedQueue;\n  } // UK Editor 관련함수\n\n\n  funcTargetOnChange(key, value) {\n    this._target = { ...this._target,\n      [key]: value\n    };\n  }\n\n  funcUpdateUk() {\n    let foundUk = this._beforeData.find(uk => uk.id === this._target.id);\n\n    foundUk.name = this._target.name;\n    foundUk.des = this._target.des;\n  }\n\n}, (_descriptor = _applyDecoratedDescriptor(_class.prototype, \"_mode\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return false;\n  }\n}), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, \"_target\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return {\n      parentId: null,\n      id: null,\n      name: '',\n      des: '',\n      children: []\n    };\n  }\n}), _applyDecoratedDescriptor(_class.prototype, \"target\", [computed], Object.getOwnPropertyDescriptor(_class.prototype, \"target\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"funcSelected\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"funcSelected\"), _class.prototype), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, \"_dupData\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return [];\n  }\n}), _descriptor4 = _applyDecoratedDescriptor(_class.prototype, \"_dupData2\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return [];\n  }\n}), _applyDecoratedDescriptor(_class.prototype, \"dupData2\", [computed], Object.getOwnPropertyDescriptor(_class.prototype, \"dupData2\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"funcAddDup\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"funcAddDup\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"funcRemoveDup\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"funcRemoveDup\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"funcTreeModel\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"funcTreeModel\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"funcGet\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"funcGet\"), _class.prototype), _descriptor5 = _applyDecoratedDescriptor(_class.prototype, \"_data\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return [];\n  }\n}), _applyDecoratedDescriptor(_class.prototype, \"data\", [computed], Object.getOwnPropertyDescriptor(_class.prototype, \"data\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"funcAddRootUk\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"funcAddRootUk\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"funcAddChildUk\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"funcAddChildUk\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"funcRemoveUk\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"funcRemoveUk\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"dfs\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"dfs\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"funcTargetOnChange\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"funcTargetOnChange\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"funcUpdateUk\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"funcUpdateUk\"), _class.prototype)), _class);\nexport default new ExStore();","map":{"version":3,"sources":["/Users/yh/Desktop/github/workspace/kdb_studio/src/uk/store/ExStore.js"],"names":["observable","makeObservable","action","computed","toJS","generateId","ExStore","constructor","_beforeData","mode","_mode","target","_target","funcSelected","dupData2","_dupData2","funcAddDup","id","push","console","log","funcRemoveDup","index","findIndex","data","splice","funcTreeModel","arrayList","rootId","rootNodes","traverse","nodes","item","Array","some","node","parentId","children","length","funcGet","_dupData","_data","funcAddRootUk","tmp","object","name","des","funcAddChildUk","funcRemoveUk","removeList","dfs","pop","i","startId","needVisitStack","visitedQueue","foundIndex","includes","filter","funcTargetOnChange","key","value","funcUpdateUk","foundUk","find","uk"],"mappings":"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","sourcesContent":["import { observable, makeObservable, action, computed, toJS } from 'mobx';\nimport generateId from '../../IDGenerator';\n\nclass ExStore {\n  constructor() {\n    makeObservable(this);\n  }\n\n  @observable\n  _mode = false;\n\n  get mode() {\n    return this._mode;\n  }\n\n  @observable\n  _target = {\n    parentId: null,\n    id: null,\n    name: '',\n    des: '',\n    children: [],\n  };\n\n  @computed\n  get target() {\n    return toJS(this._target);\n  }\n\n  @action\n  funcSelected(target) {\n    this._target = target;\n  }\n\n  @observable\n  _dupData = [];\n\n  @observable\n  _dupData2 = [];\n\n  @computed\n  get dupData2() {\n    return toJS(this._dupData2);\n  }\n\n  @action\n  funcAddDup(id) {\n    this._dupData2.push(id);\n    console.log(this._dupData2);\n  }\n\n  @action\n  funcRemoveDup(id) {\n    let index = this._dupData2.findIndex(data => data.id === id);\n    if (index > -1) {\n      this._dupData2.splice(index, 1);\n    }\n    console.log(this.dupData2);\n  }\n\n  _beforeData = [];\n\n  @action\n  funcTreeModel(arrayList, rootId) {\n    let rootNodes = [];\n\n    let traverse = (nodes, item, index) => {\n      if (nodes instanceof Array) {\n        return nodes.some(node => {\n          if (node.id === item.parentId) {\n            node.children = node.children || [];\n            return node.children.push(arrayList.splice(index, 1)[0]);\n          }\n          return traverse(node.children, item, index);\n        });\n      }\n    };\n\n    while (arrayList.length > 0) {\n      arrayList.some((item, index) => {\n        if (item.parentId === rootId) {\n          return rootNodes.push(arrayList.splice(index, 1)[0]);\n        }\n        return traverse(rootNodes, item, index);\n      });\n    }\n    return rootNodes;\n  }\n\n  @action\n  funcGet() {\n    this._dupData = [...this._beforeData];\n    this._dupData2 = [...this._beforeData];\n    this._data = this.funcTreeModel(this._dupData, 'root');\n  }\n\n  @observable\n  _data = [];\n\n  @computed\n  get data() {\n    return toJS(this._data);\n  }\n\n  @action\n  funcAddRootUk() {\n    this._mode = true;\n    let tmp = generateId(5);\n    let object = {\n      parentId: 'root',\n      id: tmp,\n      name: 'undefinded',\n      des: 'undefinded',\n    };\n    this._beforeData.push(object);\n    this.funcSelected(object);\n    this.funcGet();\n  }\n\n  @action\n  funcAddChildUk(target) {\n    this._beforeData.push(target);\n    this.funcSelected(target);\n    this.funcGet();\n  }\n\n  @action\n  funcRemoveUk(id) {\n    let removeList = this.dfs(id);\n\n    while (removeList.length !== 0) {\n      let node = removeList.pop();\n      for (let i = 0; i < this._beforeData.length; i++) {\n        if (this._beforeData[i] === node) {\n          this._beforeData.splice(i, 1);\n          i--;\n        }\n      }\n    }\n    this.funcGet();\n  }\n\n  @action\n  dfs(startId) {\n    // 탐색해야할 노드\n    let needVisitStack = [];\n    // 탐색을 마친 노드\n    let visitedQueue = [];\n\n    let foundIndex = this._beforeData.findIndex(i => i.id === startId);\n    needVisitStack.push(this._beforeData[foundIndex]);\n\n    while (needVisitStack.length !== 0) {\n      const node = needVisitStack.pop();\n      if (!visitedQueue.includes(node)) {\n        visitedQueue.push(node);\n        let arrayList = this._beforeData.filter(i => i.parentId === node.id);\n        needVisitStack = [...needVisitStack, ...arrayList];\n      }\n    }\n\n    return visitedQueue;\n  }\n\n  // UK Editor 관련함수\n  @action\n  funcTargetOnChange(key, value) {\n    this._target = {\n      ...this._target,\n      [key]: value,\n    };\n  }\n\n  @action\n  funcUpdateUk() {\n    let foundUk = this._beforeData.find(uk => uk.id === this._target.id);\n    foundUk.name = this._target.name;\n    foundUk.des = this._target.des;\n  }\n}\nexport default new ExStore();\n"]},"metadata":{},"sourceType":"module"}