{"ast":null,"code":"import _initializerDefineProperty from \"/Users/yh/Desktop/github/workspace/kdb_studio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/initializerDefineProperty\";\nimport _applyDecoratedDescriptor from \"/Users/yh/Desktop/github/workspace/kdb_studio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/applyDecoratedDescriptor\";\nimport _initializerWarningHelper from \"/Users/yh/Desktop/github/workspace/kdb_studio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/initializerWarningHelper\";\n\nvar _class, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5;\n\nimport { observable, makeObservable, action, computed, toJS } from 'mobx';\nimport generateId from '../../IDGenerator';\nlet ExStore = (_class = class ExStore {\n  constructor() {\n    _initializerDefineProperty(this, \"_mode\", _descriptor, this);\n\n    _initializerDefineProperty(this, \"_selectedId\", _descriptor2, this);\n\n    _initializerDefineProperty(this, \"_target\", _descriptor3, this);\n\n    _initializerDefineProperty(this, \"_dupData\", _descriptor4, this);\n\n    this._beforeData = [// {\n      //   parentId: 'root',\n      //   id: '1',\n      //   name: '1',\n      // },\n      // {\n      //   parentId: '1',\n      //   id: '2',\n      //   name: '2',\n      // },\n      // {\n      //   parentId: '1',\n      //   id: '3',\n      //   name: '3',\n      // },\n    ];\n\n    _initializerDefineProperty(this, \"_data\", _descriptor5, this);\n\n    makeObservable(this);\n  }\n\n  get mode() {\n    return this._mode;\n  }\n\n  get target() {\n    return toJS(this._target);\n  }\n\n  funcSelected(target) {\n    this._target = target;\n  }\n\n  get dupData() {\n    return toJS(this._dupData);\n  }\n\n  funcTreeModel(arrayList, rootId) {\n    let rootNodes = [];\n\n    let traverse = (nodes, item, index) => {\n      if (nodes instanceof Array) {\n        return nodes.some(node => {\n          if (node.id === item.parentId) {\n            node.children = node.children || [];\n            return node.children.push(arrayList.splice(index, 1)[0]);\n          }\n\n          return traverse(node.children, item, index);\n        });\n      }\n    };\n\n    while (arrayList.length > 0) {\n      arrayList.some((item, index) => {\n        if (item.parentId === rootId) {\n          return rootNodes.push(arrayList.splice(index, 1)[0]);\n        }\n\n        return traverse(rootNodes, item, index);\n      });\n    }\n\n    return rootNodes;\n  }\n\n  funcGet() {\n    this._dupData = [...this._beforeData];\n    this._data = this.funcTreeModel(this._dupData, 'root');\n    console.log(this.data);\n  }\n\n  get data() {\n    return toJS(this._data);\n  }\n\n  funcClear() {\n    this._target = {\n      parentId: null,\n      id: null,\n      name: '',\n      des: '',\n      children: []\n    };\n  }\n\n  funcAddRootUk() {\n    let tmp = generateId(5);\n    let object = {\n      parentId: 'root',\n      id: tmp,\n      name: 'undefinded'\n    };\n\n    this._beforeData.push(object);\n\n    this._selectedId = tmp;\n    this.funcClear();\n    this.funcGet();\n  }\n\n  funcAddChildUk() {\n    let tmp = generateId(5);\n    let object = {\n      parentId: this._target.id,\n      id: tmp,\n      name: 'undefined'\n    };\n\n    this._beforeData.push(object);\n\n    this._selectedId = tmp;\n    this.funcClear();\n    console.log(this._selectedId);\n    console.log(this._target);\n    this.funcGet();\n  }\n\n  funcRemoveUk(id) {\n    let removeList = this.dfs(id);\n\n    while (removeList.length !== 0) {\n      let node = removeList.pop();\n\n      for (let i = 0; i < this._beforeData.length; i++) {\n        if (this._beforeData[i] === node) {\n          this._beforeData.splice(i, 1);\n\n          i--;\n        }\n      }\n    }\n\n    this.funcGet();\n  }\n\n  dfs(startId) {\n    // 탐색해야할 노드\n    let needVisitStack = []; // 탐색을 마친 노드\n\n    let visitedQueue = [];\n\n    let foundIndex = this._beforeData.findIndex(i => i.id === startId);\n\n    needVisitStack.push(this._beforeData[foundIndex]);\n\n    while (needVisitStack.length !== 0) {\n      const node = needVisitStack.pop();\n\n      if (!visitedQueue.includes(node)) {\n        visitedQueue.push(node);\n\n        let arrayList = this._beforeData.filter(i => i.parentId === node.id);\n\n        needVisitStack = [...needVisitStack, ...arrayList];\n      }\n    }\n\n    return visitedQueue;\n  }\n\n}, (_descriptor = _applyDecoratedDescriptor(_class.prototype, \"_mode\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return false;\n  }\n}), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, \"_selectedId\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return null;\n  }\n}), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, \"_target\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return {\n      parentId: null,\n      id: null,\n      name: '',\n      des: '',\n      children: []\n    };\n  }\n}), _applyDecoratedDescriptor(_class.prototype, \"target\", [computed], Object.getOwnPropertyDescriptor(_class.prototype, \"target\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"funcSelected\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"funcSelected\"), _class.prototype), _descriptor4 = _applyDecoratedDescriptor(_class.prototype, \"_dupData\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return [];\n  }\n}), _applyDecoratedDescriptor(_class.prototype, \"dupData\", [computed], Object.getOwnPropertyDescriptor(_class.prototype, \"dupData\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"funcTreeModel\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"funcTreeModel\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"funcGet\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"funcGet\"), _class.prototype), _descriptor5 = _applyDecoratedDescriptor(_class.prototype, \"_data\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return [];\n  }\n}), _applyDecoratedDescriptor(_class.prototype, \"data\", [computed], Object.getOwnPropertyDescriptor(_class.prototype, \"data\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"funcClear\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"funcClear\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"funcAddRootUk\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"funcAddRootUk\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"funcAddChildUk\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"funcAddChildUk\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"funcRemoveUk\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"funcRemoveUk\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"dfs\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"dfs\"), _class.prototype)), _class);\nexport default new ExStore();","map":{"version":3,"sources":["/Users/yh/Desktop/github/workspace/kdb_studio/src/uk/store/ExStore.js"],"names":["observable","makeObservable","action","computed","toJS","generateId","ExStore","constructor","_beforeData","mode","_mode","target","_target","funcSelected","dupData","_dupData","funcTreeModel","arrayList","rootId","rootNodes","traverse","nodes","item","index","Array","some","node","id","parentId","children","push","splice","length","funcGet","_data","console","log","data","funcClear","name","des","funcAddRootUk","tmp","object","_selectedId","funcAddChildUk","funcRemoveUk","removeList","dfs","pop","i","startId","needVisitStack","visitedQueue","foundIndex","findIndex","includes","filter"],"mappings":"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","sourcesContent":["import { observable, makeObservable, action, computed, toJS } from 'mobx';\nimport generateId from '../../IDGenerator';\n\nclass ExStore {\n  constructor() {\n    makeObservable(this);\n  }\n\n  @observable\n  _mode = false;\n\n  get mode() {\n    return this._mode;\n  }\n\n  @observable\n  _selectedId = null;\n\n  @observable\n  _target = {\n    parentId: null,\n    id: null,\n    name: '',\n    des: '',\n    children: [],\n  };\n\n  @computed\n  get target() {\n    return toJS(this._target);\n  }\n\n  @action\n  funcSelected(target) {\n    this._target = target;\n  }\n\n  @observable\n  _dupData = [];\n\n  @computed\n  get dupData() {\n    return toJS(this._dupData);\n  }\n\n  _beforeData = [\n    // {\n    //   parentId: 'root',\n    //   id: '1',\n    //   name: '1',\n    // },\n    // {\n    //   parentId: '1',\n    //   id: '2',\n    //   name: '2',\n    // },\n    // {\n    //   parentId: '1',\n    //   id: '3',\n    //   name: '3',\n    // },\n  ];\n\n  @action\n  funcTreeModel(arrayList, rootId) {\n    let rootNodes = [];\n\n    let traverse = (nodes, item, index) => {\n      if (nodes instanceof Array) {\n        return nodes.some(node => {\n          if (node.id === item.parentId) {\n            node.children = node.children || [];\n            return node.children.push(arrayList.splice(index, 1)[0]);\n          }\n          return traverse(node.children, item, index);\n        });\n      }\n    };\n\n    while (arrayList.length > 0) {\n      arrayList.some((item, index) => {\n        if (item.parentId === rootId) {\n          return rootNodes.push(arrayList.splice(index, 1)[0]);\n        }\n        return traverse(rootNodes, item, index);\n      });\n    }\n    return rootNodes;\n  }\n\n  @action\n  funcGet() {\n    this._dupData = [...this._beforeData];\n    this._data = this.funcTreeModel(this._dupData, 'root');\n    console.log(this.data);\n  }\n\n  @observable\n  _data = [];\n\n  @computed\n  get data() {\n    return toJS(this._data);\n  }\n\n  @action\n  funcClear() {\n    this._target = {\n      parentId: null,\n      id: null,\n      name: '',\n      des: '',\n      children: [],\n    };\n  }\n\n  @action\n  funcAddRootUk() {\n    let tmp = generateId(5);\n    let object = {\n      parentId: 'root',\n      id: tmp,\n      name: 'undefinded',\n    };\n    this._beforeData.push(object);\n    this._selectedId = tmp;\n    this.funcClear();\n    this.funcGet();\n  }\n\n  @action\n  funcAddChildUk() {\n    let tmp = generateId(5);\n    let object = {\n      parentId: this._target.id,\n      id: tmp,\n      name: 'undefined',\n    };\n    this._beforeData.push(object);\n    this._selectedId = tmp;\n    this.funcClear();\n    console.log(this._selectedId);\n    console.log(this._target);\n    this.funcGet();\n  }\n\n  @action\n  funcRemoveUk(id) {\n    let removeList = this.dfs(id);\n\n    while (removeList.length !== 0) {\n      let node = removeList.pop();\n      for (let i = 0; i < this._beforeData.length; i++) {\n        if (this._beforeData[i] === node) {\n          this._beforeData.splice(i, 1);\n          i--;\n        }\n      }\n    }\n    this.funcGet();\n  }\n\n  @action\n  dfs(startId) {\n    // 탐색해야할 노드\n    let needVisitStack = [];\n    // 탐색을 마친 노드\n    let visitedQueue = [];\n\n    let foundIndex = this._beforeData.findIndex(i => i.id === startId);\n    needVisitStack.push(this._beforeData[foundIndex]);\n\n    while (needVisitStack.length !== 0) {\n      const node = needVisitStack.pop();\n      if (!visitedQueue.includes(node)) {\n        visitedQueue.push(node);\n        let arrayList = this._beforeData.filter(i => i.parentId === node.id);\n        needVisitStack = [...needVisitStack, ...arrayList];\n      }\n    }\n\n    return visitedQueue;\n  }\n}\nexport default new ExStore();\n"]},"metadata":{},"sourceType":"module"}